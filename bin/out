#!/bin/bash
set -e
set -o pipefail
exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging
jq -M -S . < /dev/stdin > /tmp/input

deploy() {
    DEPLOYMENT=$1
    CONTAINER=$2
    IMAGE=$3
    BINARY_MD5=$4

    [ -n "$DEPLOYMENT" ] || exit 1
    [ -n "$IMAGE" ] || exit 1
    [ -n "$CONTAINER" ] || exit 1

    $KUBECTL get deployments --show-labels --output=json > /tmp/deployments.json
    OLD_BINARY_MD5=`cat /tmp/deployments.json | jq --arg deployment "${DEPLOYMENT}" '.items[] | select(.metadata.name == $deployment) | .metadata.annotations."concourse.binary_md5"' | tr '"' '\n' | grep -v -E "^$"`

    echo "old binary MD5 = $OLD_BINARY_MD5"
    echo "new binary MD5 = $BINARY_MD5"
    if [[ "$BINARY_MD5" == "$OLD_BINARY_MD5" ]]; then
	echo "identical binaries, so skipping deployment"
    else
	echo "binaries differ, so updating deployment/$DEPLOYMENT"

	$KUBECTL set image deployment/$DEPLOYMENT $CONTAINER=$IMAGE
	$KUBECTL annotate --overwrite deployment/$DEPLOYMENT concourse.binary_md5="$BINARY_MD5"
    fi
}

rollingupdate() {
    RC=$1
    IMAGE=$2

    [ -n "$RC" ] || exit 1
    [ -n "$IMAGE" ] || exit 1

    $KUBECTL rolling-update rc/$RC --image=$IMAGE
}

start_job() {
    JOB=$1
    IMAGE=$2
    UID=${3:-$(date +%s)}

    [ -n "$JOB" ] || exit 1
    [ -n "$IMAGE" ] || exit 1
    [ -n "$UID" ] || exit 1

    cat $JOB | IMAGE=$IMAGE UID=$UID envsubst | $KUBECTL create -f -
}

DEBUG=$(jq -r .source.debug < /tmp/input)
[[ "$DEBUG" == "true" ]] && { echo "Enabling debug mode.";set -x; }

cd $1

mkdir -p /root/.kube

KUBE_URL=$(jq -r .source.cluster_url < /tmp/input)
NAMESPACE=$(jq -r .source.namespace < /tmp/input)

KUBECTL="/usr/local/bin/kubectl --server=$KUBE_URL --namespace=$NAMESPACE"

# configure SSL Certs if available
if [[ "$KUBE_URL" =~ https.* ]]; then
    KUBE_CA=$(jq -r .source.cluster_ca < /tmp/input)
    KUBE_KEY=$(jq -r .source.admin_key < /tmp/input)
    KUBE_CERT=$(jq -r .source.admin_cert < /tmp/input)
    CA_PATH="/root/.kube/ca.pem"
    KEY_PATH="/root/.kube/key.pem"
    CERT_PATH="/root/.kube/cert.pem"

    echo "$KUBE_CA" | base64 -d > $CA_PATH
    echo "$KUBE_KEY" | base64 -d > $KEY_PATH
    echo "$KUBE_CERT" | base64 -d > $CERT_PATH

    KUBECTL="$KUBECTL --certificate-authority=$CA_PATH --client-key=$KEY_PATH --client-certificate=$CERT_PATH"
fi

# get image name
IMG_FILE=$(jq -r .params.image_name < /tmp/input)
IMG=$(cat $IMG_FILE)
TAG_FILE=$(jq -r .params.image_tag < /tmp/input)
TAG=$(cat $TAG_FILE)
IMG="$IMG:$TAG"

# get kube resource id
RESOURCE_TYPE=$(jq -r .source.resource_type < /tmp/input)
RESOURCE_NAME=$(jq -r .source.resource_name < /tmp/input)
RESOURCE_PATH=$(jq -r .params.resource_path < /tmp/input)
CONTAINER_NAME=$(jq -r .source.container_name < /tmp/input)

# calculate MD5 if the binary path exists
BINARY_PATH=$(jq -r .source.binary_path < /tmp/input)
if [[ $BINARY_PATH ]]; then
    BINARY_MD5=`md5sum $BINARY_PATH | grep -E -o '^[^ ]+'`
    echo "binary path $BINARY_PATH found"
else
    echo "binary path $BINARY_PATH not found"
fi

if [[ -z "$RESOURCE_TYPE" ]]; then
    RESOURCE_TYPE=$(jq -r .params.resource_type < /tmp/input)
fi

if [[ -z "$RESOURCE_NAME" ]]; then
    RESOURCE_TYPE=$(jq -r .params.resource_name < /tmp/input)
fi

if [[ "$CONTAINER_NAME" == "null" ]]; then
  CONTAINER_NAME=$RESOURCE_NAME
fi

export KUBECTL

# do things
case $RESOURCE_TYPE in
    deployment)
    deploy $RESOURCE_NAME $CONTAINER_NAME $IMG $BINARY_MD5;;
    replicationcontroller)
    rollingupdate $RESOURCE_NAME $IMG;;
    job)
    start_job $RESOURCE_PATH $IMG $(date +%s);;
    *)
    exit 1
esac

result="$(jq -n "{version:{container:\"$IMG\"}}")"
echo "$result" | jq -s add  >&3
